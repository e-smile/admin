(function(W) {
                W.E = W.E || {}
                W.E.__whileInitApp = function() {
                  //  Ext.apply(Ext.getApp().controller , { "restxq" : "/restxq", "ajax" : "/controller/ajaxDialogue", "ajaxGet" : "/controller/ajaxDialogueGet", "treeLoader" : "/controller/treeLoader", "store" : "/controller/lookup", "submit" : "/controller/submit", "system" : "/controller/systemFunctions", "geo" : "/controller/geoServer", "svg" : "/controller/svgServer", "resetPsw" : "/controller/pswResetPsw", "api" : { "load" : "/load", "create" : "/create", "save" : "/submit", "destroy" : "/destroy_action" } })                ;
    (function() {
    var app = Ext.getApp(),
        rest = app.restxq,
        processPara = function(array, param) {
                var ret = {};
                Ext.forEach(array, function(p) {
                if(param[p] && param[p] != 'paramNotFound') {
                   ret[p] = param[p];
                    }
                });    
                return ret
              },
        re = /{\$(\w|[-])+}/g;
Ext.apply(rest, {
    re :  re,
    replace : function(str, data) {
        return str.replace(re, function(match,tag,c){
            return data[match.slice(2,-1)] || match
            }
        )
    },
    getArray : function(restxq) {
        restxq = restxq ||{};
        var   ret = [],
            path = restxq.path; 
       if(!path) {return ret}
           path.replace(re, function(match) {
               ret.push(match.slice(2,-1))
       })
       return ret
    },
    getParams : function(restxq, xf_field) {
        restxq = rest.getRestxq(restxq || xf_field.restxq) ;
        if(!restxq) {return {}}
        var ret = {}, 
            map = restxq.map; 
        if(Ext.isArray(map)) {
            map = {};
            Ext.forEach(restxq.map, function(m) {
                var sp = m.split('=')
                map[sp[0]] = sp[1] 
            })
        }    
       Ext.forEach(rest.getArray(restxq)
            .concat(restxq.formPara ||[])
            .concat(restxq.dataPara ||[])
            .concat(restxq.queryPara ||[])
            .concat(restxq.headerPara ||[]), function(item) {
                ret[item] = (map && map[item]) 
                    ? (Ext.isFunction(map[item]) ?map[item](xf_field) : map[item] )
                   : (xf_field.modelInstance && xf_field.modelInstance.data[item])
                    ? xf_field.modelInstance.data[item]
                        : Ext.isFunction(rest[item])
                            ? rest[item](xf_field)
                            : Ext.isFunction(app[item.getter()]) 
                                ? app[item.getter()]()
                                : 'paramNotFound'
        })  
        
        return ret
    },
    getRestxq : function(id) {
        if(id) {
            return Ext.isString(id) 
                ? rest[id] 
                : id.id 
                    ? Ext.apply(id, rest[id.id])
                    : id
         }
    },
    getPath : function(restxq, xf_field, param) {
        xf_field = xf_field || {} ;
        restxq = rest.getRestxq(restxq || xf_field.restxq) ;
        param = param ||  rest.getParams(restxq, xf_field); 
        if(!restxq) {return ''}
        var ret="", p = restxq.queryPara;
        if(p && p.length) {
            ret = processPara(p, param)
            ret = Ext.Object.toQueryString(ret)  
        }   
        return Ext.String.urlAppend(rest.replace(restxq.path || "", param),ret)  
        
    },
    getHeaders: function(restxq, xf_field, param) {
         xf_field = xf_field || {} ;
         restxq = rest.getRestxq(restxq || xf_field.restxq) ;
         param = param ||  rest.getParams(restxq, xf_field);
         var ret, p = restxq.headerPara;
         if(p && p.length) {
            ret = processPara(p, param)
        } 
        return ret
    },
    getData: function(restxq, xf_field, param) {
         xf_field = xf_field || {} ;
         restxq = rest.getRestxq(restxq || xf_field.restxq) ;
         param = param ||  rest.getParams(restxq, xf_field);
         var ret, p = restxq.dataPara;
         if(p && p.length) {
            ret = processPara(p, param)
        } 
        return ret
    },
    getObject : function(restxq, xf_field) {
         xf_field = xf_field || {} ;
         restxq = rest.getRestxq(restxq || xf_field.restxq) ;
         var param = rest.getParams(restxq, xf_field),
         ret = {
            path: rest.getPath(restxq, xf_field, param),
            headers: rest.getHeaders(restxq, xf_field, param),
            method: restxq.method };
          return restxq.dataPara 
          	? Ext.apply(ret, rest.getData(restxq, xf_field, param)) 
          	: ret
    },
    "doc-id" : function(xf_field) {
        return xf_field.modelInstance.instance.id
    }
})
})();Ext.apply(Ext.getApp().restxq, {"rep:model-wrap#6":{ "method" : "GET", "path" : "/oData/{$appKey}/{$wrapper-type}/$model-wrap", "queryPara" : ["nest"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"] },"prc:deploy#7":{ "method" : "POST", "path" : "/deploy/{$appKey}/{$deploy-type}/{$activate}/{$doc-id}", "headerPara" : ["user", "password"], "dataPara" : ["data"] },"geo:topo#2":{ "method" : "GET", "path" : "/topo/{$appKey}/{$key}" },"prc:validate#7":{ "method" : "POST", "path" : "/validate/{$appKey}/{$validation-type}/{$doc-id}/{$validation-item-id}", "headerPara" : ["guest", "password"], "dataPara" : ["data"] },"ep:instance#8":{ "method" : "GET", "path" : "/oData/{$appKey}/{$app}/{$type}/$instance", "queryPara" : ["lock", "version"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"] },"p-ep:instance#8":{ "method" : "POST", "path" : "/oData/{$appKey}/{$app}", "queryPara" : ["lock", "user"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"], "dataPara" : ["data"] },"rep:instance#14":{ "method" : "GET", "path" : "/oData/{$appKey}/reporting/$instance", "queryPara" : ["$filter", "$top", "$skip", "doc-id", "wrapper-type", "include-model", "date", "target", "position", "office", "programmeActivity"], "headerPara" : ["user", "password"] },"prc:validate#4":{ "method" : "GET", "path" : "/validate/{$appKey}/{$validation-type}/{$doc-id}/{$validation-item-id}" },"ep:model#7":{ "method" : "GET", "path" : "/oData/{$appKey}/{$app}/{$type}/$model", "queryPara" : ["version"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"] },"prc:set-status#10":{ "method" : "POST", "path" : "/set-status/{$appKey}/{$status}/{$doc-id}", "queryPara" : ["state", "app", "version"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"], "dataPara" : ["data"] },"rep:model#7":{ "method" : "GET", "path" : "/oData/{$appKey}/{$form-id}/$model", "queryPara" : ["version", "ref-id"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"] },"ds:instance#14":{ "method" : "GET", "path" : "/oData/{$appKey}/{$type}/$dataset", "queryPara" : ["$filter", "$select", "$top", "$skip", "$expand", "$orderby", "output-type", "country", "ms"], "headerPara" : ["user", "password"], "cookiePara" : ["JSESSIONID"] }});Ext.apply(Ext.getApp().apiKeys,{ "bing" : "Agc_247vNYJkUYF6emUwblcqmFxrEXOf19cLnDn-CdXUtqskgfM_-jvbh1agJkhL", "google" : "ABQIAAAA-PnDng4F1lwKJlN_WBjjJRT2yXp_ZAY8_ufC3CFXhHIE1NvwkxRjaUYvsCBVOXxqd_m000G_Mhejaw", "tile.cloudmade.com" : "3d13ea4ad3414e848fea187ddd4ed912" });(function(){ var  e=Ext.extend, r = E.action.Mgr ; r.models={ext4: [],monitoringVisit: [],resultMatrix: ['submitData'],result: [],reminder: [],metaTask: [],task: [],job: [],reportingFlow: ['submitData','resetFormRef'],assignmentCoverage: [],indicator: ['submitData'],programmeActivity: ['submitData','getInstance'],projectSite: ['submitData'],form: ['submitData','activatePreview','saveData'],section: ['submitData'],container: ['submitData'],field: [],envelope: [],envelopeGroupBy: [],dataEntryCtrl: [],office: ['submitData'],position: [],person: ['edit','delete','submitData'],organisation: ['edit','delete','submitData'],search: [],dataset: [],datasetValues: [],dataView: [],viewLayout: [],crossfilter: [],dataField: [],dimension: [],dimGroup: [],map: ['edit','delete','submitData'],lmap: ['edit','delete'],marker: ['edit','delete'],popup: ['edit','delete'],rasterLayer: ['edit','delete'],vectorLayer: ['edit','delete'],ctLayer: ['edit','delete'],control: ['edit','delete'],relationship: ['edit','delete','submitData','refreshRelationship'],node: [],link: [],ct: [],panel: [],tabPanel: [],dcGrid: [],dcChart: [],dcMap: [],categories: [],options: [],appInstance: [],sync: []}; r.register({ "id" : "getInstance", "text" : "get instance", "tbar" : true, "width" : "10", "menuId" : "default", handler: function() {inst = this.manager.cmp.instance ;ci('instance:', inst, inst.xmlRoot) } }); r.register({ "id" : "logout", handler: function() {var app = Ext.getApp(); app.ajaxCall(app.xml.wrap('action','logout')) } }); r.register({ "id" : "login", "text" : "login", "iconCls" : "user svg", "buttons" : true, xfa : 'online', getSelectedModel: function() {return [Ext.getApp().appInstance]}, entityName : 'appInstance', actionCfg: { url : Ext.getApp().buildUrl('ajax'), action : 'userLogin' }, handler: function(){this.getSteward().submitHandler(this.actionCfg)} }); r.register({ "id" : "forgotPsw", "text" : "request passord", xfa : 'online', getSelectedModel: function() {return [Ext.getApp().appInstance]}, entityName : 'appInstance', actionCfg: { url : Ext.getApp().buildUrl('resetPsw') }, handler: function(){this.getSteward().submitHandler(this.actionCfg)} }); r.register({ "id" : "add", "text" : "add", "tooltip" : "Add one empty row (Enter)", "atype" : "gridaction", "iconCls" : "svg plus-1", "tbar" : true, "cmenu" : true, "key" : " Ext.EventObject.ENTER", handler: function() { this.manager.cmp.addHandler.apply(this)} }); r.register({ "id" : "copy", "text" : "copy", "tooltip" : "Copy row above row (Insert)", "atype" : "gridaction", "iconCls" : "svg new-window", "tbar" : true, "cmenu" : true, "key" : " Ext.EventObject.INSERT", handler: function() { this.manager.cmp.addHandler.call(this, true)} }); r.register({ "id" : "remove", "text" : "remove", "tooltip" : "Remove active row (Delete)", "atype" : "gridaction", "iconCls" : "svg minus-1", "tbar" : true, "cmenu" : true, "key" : " Ext.EventObject.Delete", handler: function() { this.manager.cmp.removeHandler.call(this, arguments)} }); r.register({ "id" : "submitData", "text" : "submit", "tooltip" : "submit data to the server", "iconCls" : "upload svg", "menuId" : "default", "position" : 0, xfa : 'online', getSelectedModel: function() {return [Ext.getApp().appInstance]}, entityName : 'appInstance', handler: function(){this.manager.cmp.instanceSteward.submitHandler(this.actionCfg)} }); r.register({ "id" : "saveData", "text" : "save", "tooltip" : "save data locally", "iconCls" : "save svg", "menuId" : "default", "position" : 1, handler: function(){this.manager.cmp.instanceSteward.saveHandler(this.actionCfg)} }); r.register({ "id" : "syncData", "text" : "sync", "tooltip" : "sync data ", "iconCls" : "sync svg", "menuId" : "default", "position" : 2, handler: function(){this.manager.cmp.instanceSteward.syncHandler(this.actionCfg)} }); r.register({ "id" : "applyRigths", "text" : "apply rigths to children", "tooltip" : "apply user rigths to children application objects whenever possible (e.g. when the current user is granted permission to do so)", "iconCls" : "gear svg", handler: function(button){ if(this.manager) { return this.manager.cmp /* launched through action plugin */ } /* launched from within a button */ var mo = button.getParentConfig('modelInstance'), ur_r = mo.get('ur_r'), ur_d = mo.get('ur_d'), ur_u = mo.get('ur_u'); mo.getModelInstance({getXpath: './/*[@entityName]', fn: function(mo,config) {mo.xf_set('ur_r', ur_r);mo.xf_set('ur_d', ur_d);mo.xf_set('ur_u', ur_u)}}) } }); r.register({ "id" : "delete", "atype" : "multirow", "tbar" : true, "cmenu" : true, "text" : "delete", "tooltip" : "delete this element (on the server)", "iconCls" : "svg minus-1", "confirm" : "are you sure you want to delete the selected elements?", handler: function(){ var item ='', selectedRows = this.getSelections(); Ext.each(selectedRows, function(r) { item += r.id},this); var g =this.manager.cmp; g.ajaxCall(item + e_s.xml.wrap('action', 'remove'),selectedRows); g.fireEvent('beforeremoveao',selectedRows); } }); r.register({ "id" : "edit", "atype" : "singlerow", "tbar" : true, "cmenu" : true, "text" : "edit", "tooltip" : "edit this element", "iconCls" : "svg pencil-1", handler: function( ) { var meta = this.getSelectedModel()[0].getMetaData(), app = Ext.getApp(), id = app.buildId(meta); Ext.getApp().showWindow({ action :'edit', entityName : meta.type, instanceId : id }); } }); r.register({ "id" : "resetFormRef", "text" : "reset the form", "iconCls" : null }); r.register({ "id" : "upgradeVersion", "text" : "update version", "iconCls" : null }); r.register({ "id" : "cancel", "text" : "cancel", "scale" : "medium", handler: function() { this.up('window').close() } }); r.register({ "id" : "done", "text" : "done", "iconCls" : "check-mark-1 svg", "scale" : "medium", handler: function() { this.up('window').close() } }); r.register({ "id" : "generate", "text" : "generate", "tooltip" : "generate data", "iconCls" : "gears svg", handler: function(){this.manager.cmp.generateHandler(this.actionCfg)} }); r.register({ "id" : "mapIt", "atype" : "action", "tbar" : true, "text" : "map", "tooltip" : "place this on a map", "iconCls" : "map-marker svg", handler: function( ) { var mo = this.getSelectedModel(); Ext.getApp().showWindow({ iconCls : 'globe svg', cls : E.widget.win.Modal, title : 'localize ' + (mo.getLookup('identifyer') || mo.getLookup('label')|| 'current item'.lo()) + ' on the map'.lo(), id : 'mapIt', buttons : null, width : 400, height : 300, plugins : { ptype : 'instancesteward', modelInstance : mo, formContainer : {xtype: 'view_mapit'} } }) } }); r.register({ "id" : "editDetails", "atype" : "action", "tbar" : true, "text" : "edit details", "tooltip" : "open a new window for editing", "iconCls" : "svg pencil-1", handler: function( ) { var p = this.manager.cmp, name = p.modelInstance.getModelName(); Ext.getApp().showWindow({ modelInstance: p.modelInstance, parentModelInstance : Ext.isFunction(p.getParentModelInstance) ? p.getParentModelInstance() : undefined, containerType : this.containerType ? this.containerType: 'Default', id : p.id + '-' + name, entityName : name, action : 'edit', dependant : true, caller : p }) } }); r.register({ "id" : "activatePreview", "menuId" : "tools", "search" : true, "multirow" : false, "text" : "preview form", "tooltip" : "preview and test this form", "iconCls" : "svg pencil-1", "position" : 0, handler: function( ) { var p = this.manager.cmp, name = p.modelInstance.getModelName(); Ext.getApp().showWindow({ instance : this.getSelectedModel()[0].instance, setLookupLabel : function(value) {this.setTitle(['preview for'.lo(), ': ', value ].join(''))}, insideCls : E.da.Preview, id : p.id + '-' + 'fo', keepTbar : true, entityName : name, action : 'preview', dependant : true, caller : p }) } }); r.register({ "id" : "getRelationship", "atype" : "singlerow", "tbar" : true, "cmenu" : true, "search" : true, "multirow" : true, "text" : "relationship", "tooltip" : "view the relationship for this element", "iconCls" : "svg link", handler: function(selectedRows, object, container ) { Ext.each(selectedRows, function() { MyDesktop.dispatchActionFromRow('loadNewWindow', 'winNew', 'getRelationship', 'relationship', object.defaultWindow, selectedRows) }); } }); r.register({ "id" : "buildKml", "atype" : "singlerow", "tbar" : true, "cmenu" : true, "text" : "build kml", "tooltip" : "build the kml file to be viewed with google earth", "mimeType" : "kml", "iconCls" : "kml", handler: function(selectedRows, object, container ) { Ext.each(selectedRows, function() { MyDesktop.dispatchActionFromRow('upload', 'buildKml', 'buildKml', 'geMap', object.defaultWindow, selectedRows) }); } }); r.register({ "id" : "exportTextData", "atype" : "singlerow", "tbar" : false, "cmenu" : false, "text" : "export data", "tooltip" : "export selected data", "mimeType" : "text/plain", "iconCls" : "export", handler: function(selectedRows, object, container ) { Ext.each(selectedRows, function() { MyDesktop.dispatchActionFromRow('upload', 'exportTextData','exportTextData', '---', object.defaultWindow, selectedRows) }); } }); r.register({ "id" : "move", "ccmenu" : "true", "text" : "move this object", handler: function(action, ev) { var mgr = this.manager, cmp = mgr.cmp, vis = cmp.getVis(), map = vis.map, coord, mo = vis.activeCfg.modelInstance, set = function(mo,e) { if(mo) { coord = map.pointLocation(map.mouse(e.browserEvent)); mo.set({LL_la:coord.lat, LL_lo: coord.lon}); } }, moveFn = function(e) { e.stopEvent(); set(mo,e) }, el = cmp.getEl(); mgr._suspendDispatch =true ; el.setStyle('cursor', 'crosshair'); el.on('mousemove', moveFn); el.on('click', function(e) { e.stopEvent(); el.un('mousemove', moveFn); el.setStyle('cursor'); set(mo,e); delete mgr._suspendDispatch; }, cmp, {single:true}); } }); r.register({ "id" : "refreshRelationship", "menuId" : "tools", "iconCls" : "refresh svg", "text" : "refresh", "tooltip" : "refresh as to reflect latest relationship status from the database. This will remove links that are no longer active and upade labels.", "confirm" : "are you sure you want to update the status of this relationship map?" });})();(function(){ Ext.ns("E.xforms.model"); var EC = E.xforms.model, e=Ext.extend, r = E.xforms.model.xpathMgr ; r.register({ "id" : "1", "expr" : "../../baseFields/number +1", "dep" : "../../baseFields/number" }); r.register({ "id" : "2", "expr" : "../../baseFields/text =  'relevant'", "dep" : ["../../baseFields/text", null] }); r.register({ "id" : "3", "expr" : "../calculate > 10", "dep" : "../calculate" }); r.register({ "id" : "4", "expr" : "../../baseFields/number > 10", "dep" : "../../baseFields/number" }); r.register({ "id" : "5", "expr" : "string-length(../../baseFields/text) > 3", "dep" : "../../baseFields/text" }); r.register({ "id" : "6", "expr" : "./ancestor::xf:instance/@user != ./ancestor::*/metaData[1]/owner", "dep" : ["./ancestor::xf:instance/@user", "./ancestor::*/metaData/owner"] }); r.register({ "id" : "7", "expr" : "./preceding-sibling::person != .", "dep" : ["./preceding-sibling::person", "."] }); r.register({ "id" : "8", "expr" : "./preceding-sibling::projectSite != .", "dep" : ["./preceding-sibling::projectSite", "."] }); r.register({ "id" : "9", "expr" : "not(./preceding-sibling::programmeActivity = .)", "dep" : ["./preceding-sibling::programmeActivity", "."] }); r.register({ "id" : "10", "expr" : "not(./preceding-sibling::indicator = .)", "dep" : ["./preceding-sibling::indicator", "."] }); r.register({ "id" : "11", "expr" : "./ancestor::resultMatrix/risks/risk[*]" }); r.register({ "id" : "12", "expr" : "./ancestor::resultMatrix/assumptions/assumption[*]" }); r.register({ "id" : "13", "expr" : "../activated='true'", "dep" : "../activated" }); r.register({ "id" : "14", "expr" : "not(../preceding-sibling::*/name = .) and not(../following-sibling::*/name = .  )", "dep" : ["../preceding-sibling::*/name", ".", "../following-sibling::*/name"] }); r.register({ "id" : "15", "expr" : "1" }); r.register({ "id" : "16", "expr" : "not(../type = 'dataEntryForm')", "dep" : "../type" }); r.register({ "id" : "17", "expr" : "boolean(../designationRespType[.='typeOfficePosition' or .='supervisorPosition'])", "dep" : "../designationRespType/." }); r.register({ "id" : "18", "expr" : "../designationRespType = name(.)", "dep" : ["../designationRespType", "."] }); r.register({ "id" : "19", "expr" : "string(../respType/designationRespType) and not(../respType/isDynamic = 'true')", "dep" : ["../respType/designationRespType", "../respType/isDynamic"] }); r.register({ "id" : "20", "expr" : "../type[.= 'releaseForm']", "dep" : "../type/." }); r.register({ "id" : "21", "expr" : "not(../type[. = 'reviewInformation'])", "dep" : "../type/." }); r.register({ "id" : "22", "expr" : "../respType/*[name() = ../designationRespType][string(.) = '' or ./*[string(.) = '']] or string(../respType/designationRespType) = '' or string(../../..//disaggregationLevel) =''", "dep" : ["../respType/*/../designationRespType", "../respType/*/.", "../respType/*/./*/.", "../respType/designationRespType", "../../..//disaggregationLevel", "../respType/*", "../respType/*/./*"] }); r.register({ "id" : "23", "expr" : "not(.='true' and ../preceding-sibling::metaTask/validated='false')", "dep" : [".", "../preceding-sibling::metaTask/validated"] }); r.register({ "id" : "24", "expr" : "../type='reviewInformation'", "dep" : "../type" }); r.register({ "id" : "25", "expr" : "../type[.='dataEntryForm']", "dep" : "../type/." }); r.register({ "id" : "26", "expr" : "../number | ../type", "dep" : ["../number", "../type"] }); r.register({ "id" : "27", "expr" : "'true'" }); r.register({ "id" : "28", "expr" : "../../deployment/deployReal='true'", "dep" : "../../deployment/deployReal" }); r.register({ "id" : "29", "expr" : "../isRepeat ='true'", "dep" : "../isRepeat" }); r.register({ "id" : "30", "expr" : "../type[.='d' or .='w' or .='m' or .='y']", "dep" : "../type/." }); r.register({ "id" : "31", "expr" : "../type='w'", "dep" : "../type" }); r.register({ "id" : "32", "expr" : "../type='m'", "dep" : "../type" }); r.register({ "id" : "33", "expr" : "../endType='after'", "dep" : "../endType" }); r.register({ "id" : "34", "expr" : "../endType='ondate'", "dep" : "../endType" }); r.register({ "id" : "35", "expr" : "../repeat/* | ../isRepeat", "dep" : ["../repeat/*", "../isRepeat"] }); r.register({ "id" : "36", "expr" : "../isRepeat='true'", "dep" : "../isRepeat" }); r.register({ "id" : "37", "expr" : "../../deployment/isActive = 'true'", "dep" : "../../deployment/isActive" }); r.register({ "id" : "38", "expr" : "../deployReal='true'", "dep" : "../deployReal" }); r.register({ "id" : "39", "expr" : "not(.='true' and ./ancestor::reportingFlow[string(.//process/startsOn) = '' or  .//metaTask/validated='false' or ./reportingPackage[.//refId ='' or not(./item)]])", "dep" : [".", "./ancestor::reportingFlow/.//process/startsOn", "./ancestor::reportingFlow/ .//metaTask/validated", "./ancestor::reportingFlow/./reportingPackage/.//refId", "./ancestor::reportingFlow/./reportingPackage/./item", "./ancestor::reportingFlow", "./ancestor::reportingFlow/./reportingPackage"] }); r.register({ "id" : "40", "expr" : "concat(../form, ../programmeActivity)", "dep" : ["../form", "../programmeActivity"] }); r.register({ "id" : "41", "expr" : "./ancestor::reportingFlow/config/advanced/versionToUse != 'latest' and not(../preceding-sibling::form/refId = ../form/refId )", "dep" : ["./ancestor::reportingFlow/config/advanced/versionToUse", "../preceding-sibling::form/refId", "../form/refId"] }); r.register({ "id" : "42", "expr" : "../isVisible = 'true'", "dep" : "../isVisible" }); r.register({ "id" : "43", "expr" : "not(../preceding-sibling::position/coverage/key =  ./key)", "dep" : ["../preceding-sibling::position/coverage/key", "./key"] }); r.register({ "id" : "44", "expr" : "concat(../programmeActivity/@idref, ../target/@idref)", "dep" : ["../programmeActivity/@idref", "../target/@idref"] }); r.register({ "id" : "45", "expr" : "../../xtype[.='fo_number']", "dep" : "../../xtype/." }); r.register({ "id" : "46", "expr" : "../../../xtype[.='fo_number']", "dep" : "../../../xtype/." }); r.register({ "id" : "47", "expr" : "string(.) = '' or string(../maxValue) = '' or (. <= ../maxValue )", "dep" : [".", "../maxValue"] }); r.register({ "id" : "48", "expr" : "string(../minValue) != ''", "dep" : "../minValue" }); r.register({ "id" : "49", "expr" : "string(.) = '' or string(../minValue) = '' or (. >= ../minValue )", "dep" : [".", "../minValue"] }); r.register({ "id" : "50", "expr" : "string(../maxValue) != '' ", "dep" : ["../maxValue", null] }); r.register({ "id" : "51", "expr" : "../../xtype = 'fo_scale'", "dep" : "../../xtype" }); r.register({ "id" : "52", "expr" : "../displayType[. ='radio' and string(.) != '']", "dep" : ["../displayType/.", "../displayType"] }); r.register({ "id" : "53", "expr" : "../../dataStructure[string(./cat) != '']", "dep" : ["../../dataStructure/./cat", "../../dataStructure"] }); r.register({ "id" : "54", "expr" : "string(../../dataStructure/cat) != '' and ../catVertical  = 'true'", "dep" : ["../../dataStructure/cat", "../catVertical"] }); r.register({ "id" : "55", "expr" : "../checkExist/*= 'true'", "dep" : "../checkExist/*" }); r.register({ "id" : "56", "expr" : "instance('xtypes')//xtype[@id=current()/../../xtype]/uom[@relevant='true']", "dep" : "./../../xtype", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "\"xtypes\"" } }, ".//xtype"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../xtype"] } }] } }] } }, "./uom"] } }, ".[@relevant= \"true\" ]"] } } }); r.register({ "id" : "57", "expr" : "contains('yes lower', ../budgetHere)", "dep" : "../budgetHere" }); r.register({ "id" : "58", "expr" : "if(contains('yes lower', ../budgetHere),sum(../../*[name()= 'implementationPhase' or name() = 'programmeActivity']/budget),0)", "dep" : ["../budgetHere", "../../*/budget"], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "if", "args" : ["contains ( \"yes lower\" , ../budgetHere)", { "e" : { "typeExpr" : "functionCall", "name" : "sum", "args" : { "e" : { "typeExpr" : "contextShift", "args" : ["../../*[ name ( ) = \"implementationPhase\" or name ( ) = \"programmeActivity\" ]", "./budget"] } } } }, "0"] } } }); r.register({ "id" : "59", "expr" : ". = 'false'", "dep" : "." }); r.register({ "id" : "60", "expr" : "../display='true' and ../displayType= 'timeSpan'", "dep" : ["../display", "../displayType"] }); r.register({ "id" : "61", "expr" : "contains('yes lower', ../../budgetHere) ", "dep" : "../../budgetHere" }); r.register({ "id" : "62", "expr" : "if(string-length(.)=0,'0',.)", "dep" : ".", "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "if", "args" : ["string-length (.) =0", "\"0\"", "."] } } }); r.register({ "id" : "63", "expr" : "if(../areaCoverageHere='all',../../areaCoverage,../areaCoveragePrecise)", "dep" : ["../areaCoverageHere", "../../areaCoverage", "../areaCoveragePrecise"], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "if", "args" : ["../areaCoverageHere= \"all\"", "../../areaCoverage", "../areaCoveragePrecise"] } } }); r.register({ "id" : "64", "expr" : "../areaCoverageHere = 'some'", "dep" : "../areaCoverageHere" }); r.register({ "id" : "65", "expr" : "concat(../location/parent,'___',../metaData/id, '_ms')", "dep" : ["../location/parent", "../metaData/id", null] }); r.register({ "id" : "66", "expr" : "instance('geoStructureInst')//item[value=current()/../geoType]/type", "dep" : "./../geoType", "ser" : { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "\"geoStructureInst\"" } }, ".//item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["value", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../geoType"] } }] } }] } }, "./type"] } } }); r.register({ "id" : "67", "expr" : "count(../../marker[modelReady = 'true'])", "dep" : "../../marker/modelReady" }); r.register({ "id" : "68", "expr" : ". = '0'", "dep" : "." }); r.register({ "id" : "69", "expr" : "string-join(./lat | ./lng, ',')", "dep" : ["./lat", "./lng", null], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "string-join", "args" : ["./lat|./lng", " \",\""] } } }); r.register({ "id" : "70", "expr" : "../../details/type='polygon'", "dep" : "../../details/type" }); r.register({ "id" : "71", "expr" : "../../details/type='placemark'", "dep" : "../../details/type" }); r.register({ "id" : "72", "expr" : "string(../root) != ''", "dep" : "../root" }); r.register({ "id" : "73", "expr" : "(./preceding-sibling::languages != .) and (../root != .)", "dep" : ["./preceding-sibling::languages", ".", "../root"] }); r.register({ "id" : "74", "expr" : "./@source = 'form'", "dep" : "./@source" }); r.register({ "id" : "75", "expr" : "../@source='appCore'", "dep" : "../@source" }); r.register({ "id" : "76", "expr" : "../isSkip ='true'", "dep" : "../isSkip" }); r.register({ "id" : "77", "expr" : "not(. =  ./ancestor::*[@entityName][1]//metaData/id)", "dep" : [".", "./ancestor::*//metaData/id"] }); r.register({ "id" : "78", "expr" : "not(../operationType[. = 'empty' or .= 'notEmpty'])", "dep" : "../operationType/." }); r.register({ "id" : "79", "expr" : "../operationType[. ='between' or . ='notBetween']", "dep" : "../operationType/." }); r.register({ "id" : "80", "expr" : "string(.) = '' or . > ../value", "dep" : [".", "../value"] }); r.register({ "id" : "81", "expr" : "../config/* | ../isSkip", "dep" : ["../config/*", "../isSkip"] }); r.register({ "id" : "82", "expr" : "../isSkip='true'", "dep" : "../isSkip" }); r.register({ "id" : "83", "expr" : "../../ancestor::*[isCt='true'][1]/config/layoutCfg[(layout='hbox' or layout='vbox') and (align='stretch')]", "dep" : ["../../ancestor::*/config/layoutCfg/isCt", "../../ancestor::*/config/layoutCfg/layout", "../../ancestor::*/config/layoutCfg/align", "../../ancestor::*/config/layoutCfg"] }); r.register({ "id" : "84", "expr" : "../../xtype[. ='ct_hbox' or .= 'ct_vbox']", "dep" : "../../xtype/." }); r.register({ "id" : "85", "expr" : "../../xtype[. ='fo_fieldset' or .= 'fo_formgroup']", "dep" : "../../xtype/." }); r.register({ "id" : "86", "expr" : "../collapsible = 'true'", "dep" : "../collapsible" }); r.register({ "id" : "87", "expr" : "not(../isIndicator = 'true')", "dep" : "../isIndicator" }); r.register({ "id" : "88", "expr" : "if(../isIndicator = 'true', 'line-chart svg', 'field svg')", "dep" : ["../isIndicator", null], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "if", "args" : ["../isIndicator= \"true\"", " \"line-chart svg\"", " \"field svg\""] } } }); r.register({ "id" : "89", "expr" : "../isIndicator = 'true'", "dep" : "../isIndicator" }); r.register({ "id" : "90", "expr" : "../makeRequired ='true'", "dep" : "../makeRequired" }); r.register({ "id" : "91", "expr" : "not(../isIndicator='true')", "dep" : "../isIndicator" }); r.register({ "id" : "92", "expr" : "../../xtype[. = 'fo_textarea' or . = 'fo_checkboxstore' or .= 'fo_radiostore' or . = 'fo_number']", "dep" : "../../xtype/." }); r.register({ "id" : "93", "expr" : "../../../xtype[ .= 'fo_textarea']", "dep" : "../../../xtype/ ." }); r.register({ "id" : "94", "expr" : "../grow= 'true'", "dep" : "../grow" }); r.register({ "id" : "95", "expr" : "../../../xtype[.= 'fo_checkboxstore' or .= 'fo_radiostore']", "dep" : "../../../xtype/." }); r.register({ "id" : "96", "expr" : "../../../xtype[.= 'fo_number']", "dep" : "../../../xtype/." }); r.register({ "id" : "97", "expr" : "../../../dataStructure[string(./cat) != '' and string(./catSec) = '']", "dep" : ["../../../dataStructure/./cat", "../../../dataStructure/./catSec", "../../../dataStructure"] }); r.register({ "id" : "98", "expr" : "string(../../../dataStructure/catSec) !=''  or (string(../../../dataStructure/cat) != '' and ../catVertical  = 'true')", "dep" : ["../../../dataStructure/catSec", null, "../../../dataStructure/cat", "../catVertical"] }); r.register({ "id" : "99", "expr" : "../../xtype='fo_text'", "dep" : "../../xtype" }); r.register({ "id" : "100", "expr" : "../minLength > 0", "dep" : "../minLength" }); r.register({ "id" : "101", "expr" : ". > ../minLength or string(../minLength) = ''", "dep" : [".", "../minLength"] }); r.register({ "id" : "102", "expr" : "../maxLength > 0", "dep" : "../maxLength" }); r.register({ "id" : "103", "expr" : "string(../regex) != ''", "dep" : "../regex" }); r.register({ "id" : "104", "expr" : "../../xtype[.='fo_number' or .='fo_slider']", "dep" : "../../xtype/." }); r.register({ "id" : "105", "expr" : "./ancestor::field/xtype = 'fo_date'", "dep" : "./ancestor::field/xtype" }); r.register({ "id" : "106", "expr" : "string(../maxValue) !=''", "dep" : "../maxValue" }); r.register({ "id" : "107", "expr" : "./ancestor::field/xtype = 'fo_scale'", "dep" : "./ancestor::field/xtype" }); r.register({ "id" : "108", "expr" : "instance('xtypes')//xtype[@id=current()/../../xtype]/useStore[@relevant='true']", "dep" : "./../../xtype", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "\"xtypes\"" } }, ".//xtype"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../xtype"] } }] } }] } }, "./useStore"] } }, ".[@relevant= \"true\" ]"] } } }); r.register({ "id" : "109", "expr" : "string(../cat) != ''", "dep" : "../cat" }); r.register({ "id" : "110", "expr" : "translate(../../../*/@lastUpdate, '-T:+','') <= translate(../lastSave, '-T:+','')", "dep" : ["../../../*/@lastUpdate", null, "../lastSave"] }); r.register({ "id" : "111", "expr" : "translate(../../../*/@lastUpdate, '-T:+','') <= translate(../lastSubmit, '-T:+','')", "dep" : ["../../../*/@lastUpdate", null, "../lastSubmit"] }); r.register({ "id" : "112", "expr" : ".='true'", "dep" : "." }); r.register({ "id" : "113", "expr" : ".='true' or (../set-status/@state='done')", "dep" : [".", "../set", "status/@state"] }); r.register({ "id" : "114", "expr" : "../../../ctrl/submitCtrl = 'true'", "dep" : "../../../ctrl/submitCtrl" }); r.register({ "id" : "115", "expr" : "not(. = ../value)", "dep" : [".", "../value"] }); r.register({ "id" : "116", "expr" : "if(../programmeActivityHere='all',../../programmeActivity,../programmeActivityPrecise)", "dep" : ["../programmeActivityHere", "../../programmeActivity", "../programmeActivityPrecise"], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "if", "args" : ["../programmeActivityHere= \"all\"", "../../programmeActivity", "../programmeActivityPrecise"] } } }); r.register({ "id" : "117", "expr" : "../programmeActivityHere = 'some'", "dep" : "../programmeActivityHere" }); r.register({ "id" : "118", "expr" : "../scope = 1", "dep" : "../scope" }); r.register({ "id" : "119", "expr" : "../scope < 3", "dep" : "../scope" }); r.register({ "id" : "120", "expr" : "../scope = 4", "dep" : "../scope" }); r.register({ "id" : "121", "expr" : "../hasValue = 'true' and ../../datasetValues ", "dep" : ["../hasValue", "../../datasetValues"] }); r.register({ "id" : "122", "expr" : "../datasetType ='actual'", "dep" : "../datasetType" }); r.register({ "id" : "123", "expr" : "../../dataDescription/type='aggr'", "dep" : "../../dataDescription/type" }); r.register({ "id" : "124", "expr" : "../../dataGen/source/sourceType='manual'", "dep" : "../../dataGen/source/sourceType" }); r.register({ "id" : "125", "expr" : "../sourceType[. = 'raw' or .='aggregated'] and not(../../../datasetDesc/dataDescription/datasetType='baseline')", "dep" : ["../sourceType/.", "../../../datasetDesc/dataDescription/datasetType"] }); r.register({ "id" : "126", "expr" : "../sourceType='external'", "dep" : "../sourceType" }); r.register({ "id" : "127", "expr" : "../source/sourceType='manual'", "dep" : "../source/sourceType" }); r.register({ "id" : "128", "expr" : "not(../requiredConfig//*[not(name() = 'begin')][string() =''])", "dep" : "../requiredConfig//*" }); r.register({ "id" : "129", "expr" : "false", "dep" : "false" }); r.register({ "id" : "130", "expr" : " not(../current=name())", "dep" : "../current" }); r.register({ "id" : "131", "expr" : "../current = 'vis'", "dep" : "../current" }); r.register({ "id" : "132", "expr" : "../hasValue='true' and not(../current=name())", "dep" : ["../hasValue", "../current"] }); r.register({ "id" : "133", "expr" : "../hasValue='false' and ../../datasetDesc//datasetType[.='target'] and not(../current=name())", "dep" : ["../hasValue", "../../datasetDesc//datasetType/.", "../current"] }); r.register({ "id" : "134", "expr" : ".", "dep" : "." }); r.register({ "id" : "135", "expr" : "../urlPara[type='' or doc-id =''] or not(../logicPara/modelReady='true')", "dep" : ["../urlPara/type", "../urlPara/doc-id", "../logicPara/modelReady", "'true'"] }); r.register({ "id" : "136", "expr" : "../loadType='manual' and not(../loaded ='true')", "dep" : ["../loadType", "../loaded"] }); r.register({ "id" : "137", "expr" : "../sChoice='true'", "dep" : "../sChoice" }); r.register({ "id" : "138", "expr" : "../sSource='true'", "dep" : "../sSource" }); r.register({ "id" : "139", "expr" : "../sSettings='true'", "dep" : "../sSettings" }); r.register({ "id" : "140", "expr" : "../sSettings='true' or ../sSource='true'", "dep" : ["../sSettings", "../sSource"] }); r.register({ "id" : "141", "expr" : "string(.)", "dep" : "." }); r.register({ "id" : "142", "expr" : "boolean(../dimensions/dimension/value)", "dep" : "../dimensions/dimension/value" }); r.register({ "id" : "143", "expr" : "instance('dcStructure')//fnType/item[(not(fieldClass)) or (fieldClass/@idref=current()/../../fieldClass)]", "dep" : "./../../fieldClass", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//fnType/item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "or", "args" : ["not (fieldClass)", "or", { "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["fieldClass/@idref", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fieldClass"] } }] } } } }] } }] } } }); r.register({ "id" : "144", "expr" : "./*[not(@_relevant ='false')]", "dep" : ["./*/@_relevant", "./*"] }); r.register({ "id" : "145", "expr" : "instance('dcStructure')//fnType/item[@id=current()/../../fnType]/@para = 'number'", "dep" : "./../../fnType", "ser" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//fnType/item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fnType"] } }] } }] } }, "./@para"] } }, "=", "'number'"] } } }); r.register({ "id" : "146", "expr" : "instance('dcStructure')//fnType/item[@id=current()/../../fnType]/@para = 'text'", "dep" : "./../../fnType", "ser" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//fnType/item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fnType"] } }] } }] } }, "./@para"] } }, "=", "'text'"] } } }); r.register({ "id" : "147", "expr" : "instance('dcStructure')//fnType/item[@id=current()/../../fnType]/data", "dep" : "./../../fnType", "ser" : { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//fnType/item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fnType"] } }] } }] } }, "./data"] } } }); r.register({ "id" : "148", "expr" : "instance('dcStructure')//fnType/item[@id=current()/../../fnType]/@para= 'choice'", "dep" : "./../../fnType", "ser" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//fnType/item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fnType"] } }] } }] } }, "./@para"] } }, "=", "'choice'"] } } }); r.register({ "id" : "149", "expr" : "../edit='false'", "dep" : "../edit" }); r.register({ "id" : "150", "expr" : "ancestor::dataset/datasetValues//dataField[*]" }); r.register({ "id" : "151", "expr" : "instance('dcStructure')//fnType/item[(not(applyTo) or (./applyTo/@idref='group')) and (not(fieldClass) or (./fieldClass/@idref=current()/ancestor::*/fieldClass))]", "dep" : "./ancestor::*/fieldClass", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//fnType/item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "and", "args" : ["not (applyTo)   or  ./applyTo/@idref  =  'group'", "and", { "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "or", "args" : ["not (fieldClass)", "or", { "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["./fieldClass/@idref", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./ancestor::*/fieldClass"] } }] } } } }] } } } }] } }] } } }); r.register({ "id" : "152", "expr" : "instance('dcStructure')//store[@id='reduceType']/item", "dep" : "//store/item/@id", "ser" : { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//store"] } }, ".[@id  =  'reduceType']"] } }, "./item"] } } }); r.register({ "id" : "153", "expr" : "string-join(../type |./alias | ./simple//* | ./user/*,'')", "dep" : ["../type", "./alias", "./simple//*", "./user/*"], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "string-join", "args" : ["../type  |  ./alias  |  ./simple//*  |  ./user/*", "''"] } } }); r.register({ "id" : "154", "expr" : "../../../type='count'", "dep" : "../../../type" }); r.register({ "id" : "155", "expr" : "../../type='simple'", "dep" : "../../type" }); r.register({ "id" : "156", "expr" : "ancestor::dataset//fields/dataField[*]" }); r.register({ "id" : "157", "expr" : "ancestor::dataset/datasetValues//dataField[name=current()/../../field]/type='float'", "dep" : "./../../field", "ser" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : ["ancestor::dataset/datasetValues//dataField", { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["name", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../field"] } }] } }] } }, "./type"] } }, "=", "'float'"] } } }); r.register({ "id" : "158", "expr" : "ancestor::dataset/datasetValues//dataField[name=current()/../../field]/level='interval'", "dep" : "./../../field", "ser" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : ["ancestor::dataset/datasetValues//dataField", { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["name", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../field"] } }] } }] } }, "./level"] } }, "=", "'interval'"] } } }); r.register({ "id" : "159", "expr" : "../../type='user'", "dep" : "../../type" }); r.register({ "id" : "160", "expr" : "../../../../type='user'", "dep" : "../../../../type" }); r.register({ "id" : "161", "expr" : "string-join(latLng/* | ../zoom, '')", "dep" : ["latLng/*", "../zoom", null], "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "string-join", "args" : ["latLng/*|../zoom", " \"\""] } } }); r.register({ "id" : "162", "expr" : "string(.) = '' or (. <= ../zoomRange/maxZoom and . >= ../zoomRange/minZoom )", "dep" : [".", "../zoomRange/maxZoom", "../zoomRange/minZoom"] }); r.register({ "id" : "163", "expr" : "string-join(./*,'-')", "dep" : "./*", "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "string-join", "args" : ["./*", "\"-\""] } } }); r.register({ "id" : "164", "expr" : "string-join(./*)", "dep" : "./*", "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "string-join", "args" : "./*" } } }); r.register({ "id" : "165", "expr" : "../provider = 'www.cloudMade.com'", "dep" : "../provider" }); r.register({ "id" : "166", "expr" : "../../lType = 'bingLayer'", "dep" : "../../lType" }); r.register({ "id" : "167", "expr" : "../../../lType='circle'", "dep" : "../../../lType" }); r.register({ "id" : "168", "expr" : "../../../lType='rectangle'", "dep" : "../../../lType" }); r.register({ "id" : "169", "expr" : "../../../lType='polyline' or ../../../lType='polygone' ", "dep" : ["../../../lType", null] }); r.register({ "id" : "170", "expr" : "concat(../metaData/type, ' _', ../metaData/id,' ', ../metaData/ms)", "dep" : ["../metaData/type", null, "../metaData/id", "../metaData/ms"] }); r.register({ "id" : "171", "expr" : "count(../..//node) = 1", "dep" : "../..//node" }); r.register({ "id" : "172", "expr" : ". < ../radius", "dep" : [".", "../radius"] }); r.register({ "id" : "173", "expr" : "(./label = ../..//node/entityName) or (./label = 'default')", "dep" : ["./label", "../..//node/entityName"] }); r.register({ "id" : "174", "expr" : "concat('default node _', translate(../idref,'/', ' '))", "dep" : ["../idref", null] }); r.register({ "id" : "175", "expr" : "string(.) !=''", "dep" : "." }); r.register({ "id" : "176", "expr" : "concat('default link _',translate( ../source, '/', ' '),' _', translate( ../source, '/', ' '),' ', ../type )", "dep" : ["../source", null, "../type"] }); r.register({ "id" : "177", "expr" : "concat('svg container-', ../config/layoutCfg/layout)", "dep" : "../config/layoutCfg/layout" }); r.register({ "id" : "178", "expr" : "instance('layoutStructure')//align[@id=current()/../layout]", "dep" : "./../layout", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'layoutStructure'" } }, ".//align"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../layout"] } }] } }] } } }); r.register({ "id" : "179", "expr" : "../layout[.= 'vbox' or .='hbox']", "dep" : "../layout/." }); r.register({ "id" : "180", "expr" : "../../items/*[*]" }); r.register({ "id" : "181", "expr" : "../../ancestor::ct/config/layoutCfg/layout[.='absolute']", "dep" : "../../ancestor::ct/config/layoutCfg/layout/." }); r.register({ "id" : "182", "expr" : "concat('svg panel-', ../config/layoutCfg/layout)", "dep" : "../config/layoutCfg/layout" }); r.register({ "id" : "183", "expr" : "../../ancestor::*[isCt='true'][1]/config/layoutCfg/layout[.='absolute']", "dep" : ["../../ancestor::*/config/layoutCfg/layout/isCt", "../../ancestor::*/config/layoutCfg/layout/."] }); r.register({ "id" : "184", "expr" : "ancestor::dataView//dimGroup[*][../../fieldClass[.=instance('dcStructure')//chart[@id=current()/ancestor::*[@entityName]/chartType]/fieldClass/@idref]]", "dep" : "./ancestor::*/chartType", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : ["ancestor::dataView//dimGroup[   *   ]", { "e" : { "typeExpr" : "FilterExpr", "args" : ["../../fieldClass", { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [".", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//chart"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./ancestor::*"] } }, ".[@entityName]"] } }, "./chartType"] } }] } }] } }, "./fieldClass/@idref"] } }] } }] } }] } } }); r.register({ "id" : "185", "expr" : "ancestor::dataView//dimGroup[value=current()/../group]//controls/*[.='true' and not(@_relevant='false')]", "dep" : "./../group", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : ["ancestor::dataView//dimGroup", { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["value", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../group"] } }] } }] } }, ".//controls/*"] } }, ".[.  =  'true'  and   not (@_relevant  =  'false') ]"] } } }); r.register({ "id" : "186", "expr" : "instance('dcStructure')//chart[@id=current()/../../chartType]//proto[@idref='colorChart']", "dep" : "./../../chartType", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//chart"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../chartType"] } }] } }] } }, ".//proto"] } }, ".[@idref  =  'colorChart']"] } } }); r.register({ "id" : "187", "expr" : "instance('dcStructure')//chart[@id=current()/../../chartType]//proto[@idref='abstractBubbleChart']", "dep" : "./../../chartType", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//chart"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../chartType"] } }] } }] } }, ".//proto"] } }, ".[@idref  =  'abstractBubbleChart']"] } } }); r.register({ "id" : "188", "expr" : "string(../dimension) and (../../pivotable='true')", "dep" : ["../dimension", "../../pivotable"] }); r.register({ "id" : "189", "expr" : "string(../group)", "dep" : "../group" }); r.register({ "id" : "190", "expr" : "string(../dimension)", "dep" : "../dimension" }); r.register({ "id" : "191", "expr" : "concat(substring-before(../chartType, 'Chart'),'-chart svg')", "dep" : ["../chartType", null] }); r.register({ "id" : "192", "expr" : "instance('dcStructure')//chart[(@id= ../chart[@id = current()/../../chartType]//proto/@idref) or (@id=current()/../../chartType)]/ux[substring(name(current()),4) = @idref]", "dep" : ["./../../chartType", "."], "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "\"dcStructure\"" } }, ".//chart"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "or", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : ["../chart", { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../chartType"] } }] } }] } }, ".//proto/@idref"] } }] } } } }, "or", { "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["@id", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../chartType"] } }] } } } }] } }] } }, "./ux"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "substring", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "name", "args" : { "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } } } }, "4"] } }, "=", "@idref"] } }] } } }); r.register({ "id" : "193", "expr" : "instance('dcStructure')//store[@id='xUnits']/item[(fieldClass/@idref=current()/../../fieldClass) or not(fieldClass)]", "dep" : "./../../fieldClass", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//store"] } }, ".[@id  =  'xUnits']"] } }, "./item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "or", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["fieldClass/@idref", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fieldClass"] } }] } } } }, "or", "not (fieldClass)"] } }] } } }); r.register({ "id" : "194", "expr" : "instance('dcStructure')//store[@id='round']/item[(fieldClass/@idref=current()/../../fieldClass) or not(fieldClass)]", "dep" : "./../../fieldClass", "ser" : { "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "FilterExpr", "args" : [{ "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "instance", "args" : "'dcStructure'" } }, ".//store"] } }, ".[@id  =  'round']"] } }, "./item"] } }, { "e" : { "typeExpr" : "binaryExprCall", "name" : "or", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : null, "args" : { "e" : { "typeExpr" : "binaryExprCall", "name" : "=", "args" : ["fieldClass/@idref", "=", { "e" : { "typeExpr" : "contextShift", "args" : [{ "e" : { "typeExpr" : "functionCall", "name" : "current", "args" : null } }, "./../../fieldClass"] } }] } } } }, "or", "not (fieldClass)"] } }] } } }); r.register({ "id" : "195", "expr" : "../../chartType='pieChart'", "dep" : "../../chartType" }); r.register({ "id" : "196", "expr" : "../../chartType='rowChart'", "dep" : "../../chartType" }); r.register({ "id" : "197", "expr" : "../../chartType='barChart'", "dep" : "../../chartType" }); r.register({ "id" : "198", "expr" : "../../chartType='geoChoroplethChart'", "dep" : "../../chartType" }); r.register({ "id" : "199", "expr" : "string-join(.//*,'')", "dep" : ".//*", "ser" : { "e" : { "typeExpr" : "functionCall", "name" : "string-join", "args" : [".//*", "\"\""] } } }); r.register({ "id" : "200", "expr" : "./@source='appCore'", "dep" : "./@source" }); r.register({ "id" : "201", "expr" : ". = 'msUser'", "dep" : "." }); r.register({ "id" : "202", "expr" : "../allow='true'", "dep" : "../allow" });})();(function(){ Ext.ns("E.xforms.mgr"); var EC = E.xforms.mgr, e=Ext.extend, r = E.xforms.mgr.AoSettingsMgr ; r.add('ext4',{ "title" : "event", "iconCls" : "icon-grid", "width" : 500, "height" : 400 }); r.add('monitoringVisit',{ "title" : "monitoring visit", "iconCls" : "icon-grid", "width" : 500, "height" : 400, "index" : 0, "__edgeInv" : ["person/participatesIn/monitoringVisit", "projectSite/isVisitedBy/monitoringVisit"], "label" : "monitoringVisit" }); r.add('resultMatrix',{ "title" : "logframe", "iconCls" : "tangram  svg", "width" : 500, "height" : 400, "__edgeInv" : ["result/belongsTo/resultMatrix", "dataView/for/resultMatrix"], "label" : "resultMatrix" }); r.add('result',{ "title" : "result", "iconCls" : "tangram-piece  svg", "width" : 500, "height" : 400, "__edge" : ["result/belongsTo/resultMatrix", "result/contributesTo/result"], "__edgeInv" : ["programmeActivity/deliversFor/result", "indicator/for/result", "result/contributesTo/result"], "label" : "result" }); r.add('metaTask',{ "__edge" : ["metaTask/has/job", "metaTask/isPartOf/reportingFlow"], "__edgeInv" : "assignmentCoverage/for/metaTask" }); r.add('task',{ "__edgeInv" : "job/has/task" }); r.add('job',{ "__edge" : "job/has/task", "__edgeInv" : "metaTask/has/job" }); r.add('reportingFlow',{ "title" : "reporting flow", "iconCls" : "icon-grid", "width" : 500, "height" : 400, "__edgeInv" : ["form/isPartOf/reportingFlow", "programmeActivity/isPartOf/reportingFlow", "metaTask/isPartOf/reportingFlow"], "label" : "reportingFlow" }); r.add('assignmentCoverage',{ "__edge" : "assignmentCoverage/for/metaTask" }); r.add('indicator',{ "title" : "indicator", "iconCls" : "line-chart svg", "width" : 500, "height" : 500, "__edge" : ["indicator/for/result", "indicator/isBoundTo/field"], "label" : "indicator" }); r.add('programmeActivity',{ "title" : "programme activity", "iconCls" : "puzzle svg", "width" : 500, "height" : 500, "__edge" : ["programmeActivity/deliversFor/result", "programmeActivity/isPartOf/reportingFlow", "programmeActivity/isSubComponentOf/programmeActivity", "programmeActivity/isBoundTo/dataset"], "__edgeInv" : "programmeActivity/isSubComponentOf/programmeActivity", "label" : "programmeActivity" }); r.add('projectSite',{ "title" : null, "iconCls" : "icon-grid", "width" : 500, "height" : 400, "__edge" : "projectSite/isVisitedBy/monitoringVisit" }); r.add('form',{ "title" : "reporting definition", "iconCls" : "paper svg", "width" : 500, "height" : 400, "index" : 1, "__edge" : "form/isPartOf/reportingFlow", "__edgeInv" : "section/belongsTo/form", "label" : "form" }); r.add('section',{ "iconCls" : "paper svg", "index" : 2, "__edge" : "section/belongsTo/form", "__edgeInv" : ["field/definesSkipPatternFor/section", "field/belongsTo/section", "container/belongsTo/section"], "label" : "section" }); r.add('container',{ "iconCls" : "container svg", "__edge" : ["container/belongsTo/section", "container/belongsTo/container"], "__edgeInv" : ["field/definesSkipPatternFor/container", "field/belongsTo/container", "container/belongsTo/container"], "label" : "container" }); r.add('field',{ "iconCls" : "field svg", "title" : "field", "__edge" : ["field/definesSkipPatternFor/section", "field/belongsTo/section", "field/definesSkipPatternFor/container", "field/belongsTo/container", "field/definesSkipPatternFor/field"], "__edgeInv" : ["indicator/isBoundTo/field", "field/definesSkipPatternFor/field"], "label" : "field" }); r.add('office',{ "title" : "office", "iconCls" : "main-office svg", "width" : 700, "height" : 500, "__edge" : "office/belongsTo/office", "__edgeInv" : ["office/belongsTo/office", "person/worksIn/office", "position/isPartOf/office"], "label" : "office" }); r.add('position',{ "__edge" : ["position/isPartOf/office", "position/supervises/position"], "__edgeInv" : "position/supervises/position", "label" : "position" }); r.add('person',{ "title" : "person", "iconCls" : "man svg", "width" : 340, "height" : 400, "__edge" : ["person/participatesIn/monitoringVisit", "person/worksIn/office"], "label" : "person" }); r.add('organisation',{ "title" : "organisation", "iconCls" : "community svg", "width" : 400, "height" : 300, "label" : "organisation" }); r.add('dataset',{ "title" : "dataset", "iconCls" : "table svg", "width" : 500, "height" : 400, "__edge" : "dataset/belongsTo/dataView", "__edgeInv" : ["programmeActivity/isBoundTo/dataset", "datasetValues/for/dataset", "crossfilter/for/dataset"] }); r.add('datasetValues',{ "title" : "dataset values", "iconCls" : "line-chart svg", "width" : 500, "height" : 400, "__edge" : "datasetValues/for/dataset" }); r.add('dataView',{ "__edge" : "dataView/for/resultMatrix", "__edgeInv" : ["viewLayout/for/dataView", "dataset/belongsTo/dataView"] }); r.add('viewLayout',{ "__edge" : "viewLayout/for/dataView", "__edgeInv" : "ct/for/viewLayout" }); r.add('crossfilter',{ "__edge" : "crossfilter/for/dataset" }); r.add('dataField',{ "iconCls" : "svg hash", "title" : "field" }); r.add('dimension',{ "iconCls" : "svg eye", "title" : "dimension", "__edgeInv" : "dimGroup/for/dimension" }); r.add('dimGroup',{ "iconCls" : "svg group", "title" : "group", "__edge" : "dimGroup/for/dimension" }); r.add('map',{ "title" : "map", "iconCls" : "globe svg", "width" : 500, "height" : 400, "label" : "map" }); r.add('lmap',{ "title" : "map", "iconCls" : "globe svg", "width" : 500, "height" : 400, "label" : "map" }); r.add('marker',{ "title" : "marker", "iconCls" : "map-marker svg" }); r.add('popup',{ "title" : "popup", "iconCls" : "blog svg" }); r.add('rasterLayer',{ "title" : "raster layer", "iconCls" : "layers svg" }); r.add('vectorLayer',{ "title" : "vercor layer", "iconCls" : "layers svg" }); r.add('ctLayer',{ "title" : "other layer", "iconCls" : "layers svg" }); r.add('control',{ "title" : "control", "iconCls" : "preparedness svg" }); r.add('relationship',{ "title" : "relationship", "iconCls" : "share svg", "width" : 500, "height" : 400, "__edgeInv" : "svgStyle/for/relationship" }); r.add('node',{ "iconCls" : "sun svg", "label" : "node" }); r.add('link',{ "iconCls" : "chain svg", "label" : "link" }); r.add('ct',{ "title" : "container", "iconCls" : "svg container-layout", "__edge" : "ct/for/viewLayout" }); r.add('panel',{ "title" : "panel", "iconCls" : "svg panel-layout" }); r.add('tabPanel',{ "title" : "tab", "iconCls" : "svg tab-layout" }); r.add('dcGrid',{ "title" : "grid", "iconCls" : "svg table" }); r.add('dcChart',{ "title" : "chart", "iconCls" : "svg chart" }); r.add('dcMap',{ "title" : "map", "iconCls" : "svg map" }); r.add('categories',{ "title" : "categories", "iconCls" : "icon-grid", "width" : 560, "height" : 400, "label" : "categories" }); r.add('options',{ "title" : "option list", "iconCls" : "icon-grid", "width" : 560, "height" : 400, "label" : "optionList" }); r.add('sync',{ "iconCls" : "sync svg" });})();(function(){ Ext.ns("E.xforms.mgr"); var EC = E.xforms.mgr, e=Ext.extend, r = E.xforms.mgr.FieldSettingsMgr ; r.register({ "id" : "result", "f_2" : { "emptyText" : "result statement" } }); r.register({ "id" : "reminder", "f_1" : { "fieldLabel" : "include a reminder", "qtip" : "let the application send a reminder message in case of delay" }, "f_3" : { "fieldLabel" : "send once", "qtip" : "check to send the message only once. Otherwise the message is send on until completion of the task" }, "du_d" : { "fieldLabel" : "delay", "subLabel" : "delay after which the message is being sent" } }); r.register({ "id" : "metaTask", "f_3" : { reverseOnInvalid: true, constraintText : 'Previous tasks must be validated first'.lo(), restxq: { id: 'prc:validate#7', map: { 'validation-type' : 'metaTask', 'validation-item-id' : function(xf_field) {return xf_field.modelInstance.xf_get('mT_id').value} } } }, "f_5" : { "subLabel" : "allow the user reviewing the report to comment it" }, "f_6" : { "subLabel" : "allow the user reviewing the report to modify its content" } }); r.register({ "id" : "reportingFlow", "depl_real" : { restxq: { id: 'prc:deploy#7', map: { 'deploy-type' : 'real', 'activate' :'true' } }, reverseOnInvalid:true, subLabel: 'This action will trigger a submission to the server and initiate the reporting process'.lo(), constraintText: 'This reporting flow cannot be activated now ! <br/> reason : all reporting flow tasks must be validated, a starting date must be set and there must be at least one form in the reporting package before being able to ativate. Please validate each reporting task first'.lo(), onSetBool : function(xf_field) { if(xf_field.value == 'true' || xf_field == true) {return this.setText('pause deployment'.lo())} return this.setText('activate deployment'.lo()) } }, "f_13" : { "constraintText" : "form and programme activity should be unique", "allowBlank" : false }, "f_14" : { "constraintText" : "form and programme activity should be unique", "subLabel" : "programme aditivty for which the associated form will collect data. Note that modifying this field will unvalidate all reporting tasks under the \"build reporting flow: tab." } }); r.register({ "id" : "assignmentCoverage", "f_10" : { "constraintText" : "coverage should be unique" } }); r.register({ "id" : "indicator", "f_6" : { "emptyText" : "select indicator type" }, "f_11" : { "emptyText" : "drop a category here ", "qtip" : "drop from categories tab here" } }); r.register({ "id" : "programmeActivity", "f_7" : { "qtip" : "description of this programme activity" }, "f_8" : { "qtip" : "justification for programme intervention" }, "f_9" : { "qtip" : "expected outcome" }, "f_11" : { "fieldDefaults" : { "labelWidth" : "150" } }, "f_12" : { "qtip" : "specify whether budget figures are calculated from sub-activities or not" }, "f_13" : { "qtip" : "Displays the sum of implementation phase budget, or the sum of sub-activity budgets. Readonly field. " }, "f_18" : { "emptyText" : "name of the implementation phase" } }); r.register({ "id" : "projectSite", "f_4" : { "allowBlank" : false, "storeCfg" : { "getXpath" : ".//item[isActive='true' and isProjectSite = 'true']" } }, "f_7" : { "allowBlank" : false } }); r.register({ "id" : "form", "f_6" : { "allowBlank" : false, "qtipTile" : "Version", "qtip" : "current version of this form", "readOnly" : true } }); r.register({ "id" : "section", "f_4" : { "emptyText" : "short description for this section" }, "f_3" : { "emptyText" : "title for this section" } }); r.register({ "id" : "container", "f_2" : { "emptyText" : "select container type" }, "f_3" : { "qtip" : "The title text to be used (html tags are accepted)" }, "f_10" : { "qtip" : "Relative width/height in the case multiple columns or rows are used" }, "f_11" : { "title" : "collapsible settings" }, "f_12" : { "qtip" : "check to make the fieldset collapsible and have the expand/collapse toggle button automatically rendered into the legend element" }, "f_20" : { "fieldLabel" : "collapse this container", "qtip" : "check to render this container collapsed when the form is first opened" } }); r.register({ "id" : "field", "f_5" : { "emptyText" : "select field type" }, "indCb" : { "qtip" : "check this to bind this field to an indicator" }, "f_11" : { "fieldLabel" : "make this field required", "qtip" : "forms and questionnaires are not validated when required fields are kept empty" }, "f_12" : { "fieldLabel" : "empty value error", "qtip" : "The error text to display if the required fields are empty(defaults to 'This field is required')" }, "f_58" : { "fieldLabel" : "enable grow", "qtip" : "true if this field should automatically grow and shrink to its content (defaults to false)" }, "f_59" : { "fieldLabel" : "maximum height", "qtip" : "The maximum height to allow when grow is enabled (defaults to 1000)" }, "f_60" : { "fieldLabel" : "minimum height", "qtip" : "The minimum height to allow when grow is enabled (defaults to 1000)" }, "f_61" : { "qtip" : "Specifies the number of columns to use when displaying grouped checkbox/radio controls", "maxValue" : 6 }, "f_62" : { "qtip" : "The maximum precision to display after the decimal separator (defaults to 2)", "fieldLabel" : "decimal precision" }, "f_16" : { "fieldLabel" : "minimum length", "qtip" : "Minimum input field length allowed by validation" }, "f_17" : { "fieldLabel" : "minimum length error", "qtip" : "Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}')" }, "f_14" : { "maxValue" : 1000, "fieldLabel" : "maximum length", "qtip" : "Maximum input field length allowed by validation", "constraintText" : "the maximum length should be greater than the minimum length" }, "f_15" : { "fieldLabel" : "maximum length error", "qtip" : "Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}')" }, "f_20" : { "fieldLabel" : "regular expression error", "qtip" : "The error text to display if regular expression is used and the test fails during validation" }, "f_45" : { "fieldLabel" : "maximum date", "qtip" : "The maximum allowed date. Can be either a Javascript date object or a string date in a valid format" }, "f_46" : { "fieldLabel" : "maximum date error", "qtip" : "The error text to display when the date in the cell is after 'maximum date' (defaults to 'The date in this field must be before {maxValue}')" }, "f_47" : { "fieldLabel" : "minimum date", "qtip" : "The minimum allowed date. Can be either a Javascript date object or a string date in a valid format" }, "f_48" : { "fieldLabel" : "minimum date error", "qtip" : "The error text to display when the date in the cell is before 'minimum date' (defaults to 'The date in this field must be after {minValue}')" }, "f_29" : { "emptyText" : "drop options here", "qtip" : "drop record from options tab here", "allowedDropType" : ["option", "form_itemOption"] }, "f_37" : { "allowedDropType" : ["cat", "form_itemCat"], "emptyText" : "drop a category here ", "qtip" : "drop from categories tab here" }, "f_38" : { "emptyText" : "drop second category", "qtip" : "drop second from categories tab here" } }); r.register({ "id" : "envelope", "trigger" : { restxq: { id: 'prc:set-status#10', map: { 'state' : 'done', 'data' : function(xf_field) {return xf_field.xmlNode.ownerElement.parentElement}, 'doc-id' : function(xf_field) {return xf_field.xmlNode.xpath('string(ancestor-or-self::*[@ref=\"form\"]/@id)')} } }, reverseOnInvalid:true, } }); r.register({ "id" : "office", "f_2" : { "emptyText" : "name of this office" } }); r.register({ "id" : "position", "f_9" : { "emptyText" : "name of this position" }, "f_19" : { "constraintText" : "a position cannot be supervized by itself" }, "f_16" : { "fieldLabel" : "programme activity supervized by this position" } }); r.register({ "id" : "person", "f_1" : { "emptyText" : "name of this person" } }); r.register({ "id" : "search", "limit" : { "maxValue" : 200 } }); r.register({ "id" : "dataset", "f_16" : { subLabel: 'this will determine how dataset values are generated'.lo() }, "f_17" : { subLabel: function(val) { if(val == true || val == 'true') {return 'dataset values are computed again on every request (note:this quite be quite resource intensive'.lo()} return 'dataset values are computed and stored once for all'.lo() } }, "dgd_4" : { fieldLabel: 'data generation mode'.lo(), columns: 1, qtip: 'choose how data is generated'.lo(), items: [{ boxLabel : 'at unit of analysis level'.lo(), inputValue: 'uoa', qtip: 'generate data for all geographical entities that belongs to the geo selection'.lo() },{ boxLabel : 'at selection level'.lo(), inputValue: 'sel', qtip: 'generate data only for the geo selection'.lo() }] } }); r.register({ "id" : "map", "f_4" : { "qtip" : "legend to be displayed along with the map" } }); r.register({ "id" : "lmap", "zoom" : { "constraintText" : "zoom level should be between zoom range" } }); r.register({ "id" : "node", "factor" : { "maxValue" : 3, "minValue" : 0.3 } }); r.register({ "id" : "sync", "f_4" : { "fieldLabel" : "sync history size", "maxValue" : 30, "subLabel" : "number of sync record history to keep locally" }, "f_6" : { "fieldLabel" : "auto synchronize ?", "subLabel" : "if set to true, the application will automatically synchronize with server data once it is online again. Otherwise, the user will have to perform synchronization manually." } });})();(function(){ Ext.ns("E.xforms.mgr"); var EC = E.xforms.mgr, e=Ext.extend, r = E.xforms.mgr.DataIslandSettingsMgr ; r.register({ "id" : "La_1", "cfg" : { "test" : "d" } }); r.register({ "id" : "La_2", "cfg" : { "test" : "d", "qtip" : "The width of labels. This property cascades to child containers (default = 150px)." } }); r.register({ "id" : "sc_6", "cfg" : { columns: 2, fieldLabel: 'type of display'.lo(), qtip: 'choose how the scale should be displayed'.lo(), items: [{ boxLabel : 'slider'.lo(), inputValue: 'slider' },{ boxLabel : 'radio'.lo(), inputValue: 'radio' }] } }); r.register({ "id" : "nbc_2", "cfg" : { "fieldLabel" : "prevent decimal", "qtip" : "Check this to forbid decimal values" } }); r.register({ "id" : "nbc_4", "cfg" : { "fieldLabel" : "minimum value", "qtip" : "The minimum allowed value", "constraintText" : "minimum value should be lower than maximum value" } }); r.register({ "id" : "nbc_5", "cfg" : { "fieldLabel" : "minimum error", "qtip" : "Error text to display if the maximum value minimum fails (defaults to \"The minimum value for this field is {minValue}\")" } }); r.register({ "id" : "nbc_6", "cfg" : { "fieldLabel" : "maximum value", "qtip" : "The maximum allowed value", "constraintText" : "maximum value should be greater than minimum" } }); r.register({ "id" : "nbc_7", "cfg" : { "fieldLabel" : "maximum error", "qtip" : "Error text to display if the maximum value validation fails (defaults to \"The maximum value for this field is {maxValue}\")" } }); r.register({ "id" : "nbc_8", "cfg" : { "fieldLabel" : "invalid number error", "qtip" : "Error text to display if the value is not a valid number. For example, this can happen if a valid character like '.'..." } }); r.register({ "id" : "margin", "cfg" : { "subLabel" : "Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or it can be a CSS style specification for each style, for example: '10 5 3 10'." } }); r.register({ "id" : "padding", "cfg" : { "subLabel" : "Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it can be a CSS style specification for each style, for example: '10 5 3 10'." } }); r.register({ "id" : "sk_ref", "cfg" : { "emptyText" : "drop a field here", "constraintText" : "cannot base skip pattern on a field that belongs to this element" } }); r.register({ "id" : "sk_2", "cfg" : { "constaintText" : "this value should be greater than the first value" } }); r.register({ "id" : "sk_pr", "cfg" : { "fieldLabel" : "print version", "subLabel" : "guide for the printed-version of the report, when dynamic skip pattern is not available" } }); r.register({ "id" : "dtr_t", "cfg" : { "labelStyle" : null } }); r.register({ "id" : "iT", "cfg" : { "subLabel" : "decide on the way themes values are being inherited from parent entries" } }); r.register({ "id" : "lan_r", "cfg" : { "qtip" : "select the root language for this form is it needs to be translated to other languages" } }); r.register({ "id" : "d3d_2", "cfg" : { "emptyText" : "from" } }); r.register({ "id" : "d3d_3", "cfg" : { "emptyText" : "to" } }); r.register({ "id" : "comp_2", "cfg" : { "label" : "edit dimension function", "qtip" : "edit dimension function for advanced utilization" } }); r.register({ "id" : "dd_13", "cfg" : "\n                        " }); r.register({ "id" : "dd_25", "cfg" : { subLabel: function(val) { if(val == true || val == 'true') {return 'this dataset constitutes a baseline'.lo()} return 'this dataset is not a baseline'.lo() } } }); r.register({ "id" : "db_a", "cfg" : { "subLabel" : "choose this field carefully as it cannot be changed once submited to the server." } }); r.register({ "id" : "me_s", "cfg" : { "emptyText" : "message subject" } }); r.register({ "id" : "me_b", "cfg" : { "emptyText" : "message body" } }); r.register({ "id" : "rep_ty", "cfg" : { "allowBlank" : false } }); r.register({ "id" : "rep_oc", "cfg" : { "allowBlank" : false, "minValue" : 1 } }); r.register({ "id" : "rep_e", "cfg" : { "allowBlank" : false } }); r.register({ "id" : "mT_n", "cfg" : { "constraintText" : "'task name' should be unique" } }); r.register({ "id" : "mT_drt", "cfg" : { "fieldLabel" : "designation type", "subLabel" : "precise how the responsibilities for this task should be designated" } }); r.register({ "id" : "sec_l", "cfg" : { "columns" : "1", "items" : [{ "boxLabel" : "none", "inputValue" : "none", "qtip" : "low security level" }, { "boxLabel" : "medium", "inputValue" : "medium", "qtip" : "users are identified if they are providing a specific code (e.g. that would be provided in an e-mail message). But they do not need to be identified against the main application server." }, { "boxLabel" : "high", "inputValue" : "high", "qtip" : "users are identified against their e-Smile account. This is not suitable for all cases. Offline data entry for instance would not be possible if this option is choosen." }] } }); r.register({ "id" : "i_8_1", "cfg" : { "allowBlank" : false, "emptyText" : "adress", "maxLength" : "100" } }); r.register({ "id" : "i_8_2", "cfg" : { "emptyText" : "locality" } }); r.register({ "id" : "areaCoverage", "cfg" : { emptyText: 'select covered geographical areas'.lo() } }); r.register({ "id" : "aC_h", "cfg" : { "fieldLabel" : "area covered by this position" } }); r.register({ "id" : "minZoom", "cfg" : { "maxValue" : 20, "minValue" : 0 } }); r.register({ "id" : "maxZoom", "cfg" : { "maxValue" : 20, "minValue" : 0 } }); r.register({ "id" : "marker", "cfg" : { items: [{xfa: 'lat', entityName:'marker'},{xfa: 'lng', entityName:'marker'}], itemsAfter: { xtype : 'bt_button', actionId : 'mapIt', text : null, cls: 'pos-2 ', style : 'margin-top: 23px;', flex : 0 } } }); r.register({ "id" : "activityCoverage", "cfg" : { emptyText: 'select programme activites'.lo() } }); r.register({ "id" : "width", "cfg" : { "qtip" : "width of this container in pixel" } }); r.register({ "id" : "height", "cfg" : { "qtip" : "heigth of this container in pixel" } }); r.register({ "id" : "flex", "cfg" : { "qtip" : "Relative width/height in the case multiple columns or rows are used" } }); r.register({ "id" : "disp_txt", "cfg" : { "emptyText" : "display text" } }); r.register({ "id" : "fe_ct", "cfg" : { "lineLabel" : "none", "fieldDefaults" : { "hideLabel" : "true" } } }); r.register({ "id" : "fe_ef", "cfg" : { "includeMargin" : "true", "fieldDefaults" : { "hideLabel" : "true" } } }); r.register({ "id" : "fe_fa", "cfg" : { "emptyText" : "factor", "qtip" : "factor driving the force of the applied color effect", "flex" : "0.7" } }); r.register({ "id" : "fe_ctrl", "cfg" : { "qtip" : "activate color effect (lighten or darken)", "flex" : "0" } }); r.register({ "id" : "st_ct", "cfg" : { "lineLabel" : "none", "fieldDefaults" : { "hideLabel" : "true" } } }); r.register({ "id" : "st_ef", "cfg" : { "includeMargin" : "true", "fieldDefaults" : { "hideLabel" : "true" } } }); r.register({ "id" : "st_fa", "cfg" : { "emptyText" : "factor", "qtip" : "factor driving the force of the applied color effect", "flex" : "0.7" } }); r.register({ "id" : "st_ctrl", "cfg" : { "qtip" : "activate color effect (lighten or darken)", "flex" : "0" } }); r.register({ "id" : "se_e", "cfg" : { fieldLabel : 'element name'.lo(), qtipTitle : 'name of the xml element'.lo(), qtip : 'name of the xml element while constructing the xml instance (this should only be used in when the xml instance must follow a known xml schema definition)'.lo() } });})();(function(){ Ext.ns("E.xforms.model"); var EC = E.xforms.model, e=Ext.extend, r = E.xforms.model.ModelMixinsMgr ; r.register({ "id" : "dataEntryCtrl", "mixin" : { "dataEntryCtrl" : "E.data.model.DataEntryCtrl" } }); r.register({ "id" : "dataset", "mixin" : { "selectorModel" : "E.data.model.SelectorModel", "dataset" : "E.data.model.Dataset" } }); r.register({ "id" : "datasetValues", "mixin" : { "datasetValues" : "E.data.model.DatasetValues" } }); r.register({ "id" : "dataView", "mixin" : { "dataView" : "E.data.model.DataView" } }); r.register({ "id" : "viewLayout", "mixin" : "E.data.model.ViewLayout" }); r.register({ "id" : "crossfilter", "mixin" : "E.data.model.Crossfilter" }); r.register({ "id" : "dataField", "mixin" : "E.data.model.DataField" }); r.register({ "id" : "dimension", "mixin" : "E.data.model.Dimension" }); r.register({ "id" : "dimGroup", "mixin" : "E.data.model.Group" }); r.register({ "id" : "lmap", "mixin" : "E.data.model.LMap" }); r.register({ "id" : "marker", "mixin" : "E.data.model.LMarker" }); r.register({ "id" : "popup", "mixin" : "E.data.model.LPopup" }); r.register({ "id" : "rasterLayer", "mixin" : "E.data.model.LRaster" }); r.register({ "id" : "vectorLayer", "mixin" : "E.data.model.LVector" }); r.register({ "id" : "ctLayer", "mixin" : "E.data.model.LCt" }); r.register({ "id" : "control", "mixin" : "E.data.model.LControl" }); r.register({ "id" : "ct", "mixin" : { "vis" : "E.data.model.XContainer", "ct" : "E.data.model.XSize" } }); r.register({ "id" : "panel", "mixin" : { "vis" : "E.data.model.XContainer", "ct" : "E.data.model.CtVis" } }); r.register({ "id" : "tabPanel", "mixin" : { "vis" : "E.data.model.XContainer", "ct" : "E.data.model.CtVis" } }); r.register({ "id" : "dcGrid", "mixin" : { "vis" : "E.data.model.DcGrid", "ct" : "E.data.model.CtVis" } }); r.register({ "id" : "dcChart", "mixin" : { "vis" : "E.data.model.DcChart", "ct" : "E.data.model.CtVis", "col" : "E.util.Color" } }); r.register({ "id" : "dcMap", "mixin" : "E.data.model.DcChart" });})();(function(){ Ext.ns("E.xforms.mgr"); var EC = E.xforms.mgr, e=Ext.extend, r = E.xforms.mgr.EdgeSettingsMgr ; r.register({ "id" : "result/belongsTo/resultMatrix", "idref" : "belongsTo", "subject" : "result", "verb" : "belongsTo", "object" : "resultMatrix", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "result/contributesTo/result", "idref" : "contributesTo", "subject" : "result", "verb" : "contributesTo", "object" : "result", "since" : null, "until" : null, "inverse" : "getContributionFrom" }); r.register({ "id" : "metaTask/has/job", "idref" : "has", "subject" : "metaTask", "verb" : "has", "object" : "job", "inverse" : "belongsTo" }); r.register({ "id" : "metaTask/isPartOf/reportingFlow", "idref" : "isPartOf", "subject" : "metaTask", "verb" : "isPartOf", "object" : "reportingFlow", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "job/has/task", "idref" : "has", "subject" : "job", "verb" : "has", "object" : "task", "inverse" : "belongsTo" }); r.register({ "id" : "assignmentCoverage/for/metaTask", "idref" : "for", "subject" : "assignmentCoverage", "verb" : "for", "object" : "metaTask", "inverse" : "has" }); r.register({ "id" : "indicator/for/result", "idref" : "for", "subject" : "indicator", "verb" : "for", "object" : "result", "inverse" : "has" }); r.register({ "id" : "indicator/isBoundTo/field", "idref" : "isBoundTo", "subject" : "indicator", "verb" : "isBoundTo", "object" : "field", "inverse" : "isBoundTo" }); r.register({ "id" : "programmeActivity/deliversFor/result", "idref" : "deliversFor", "subject" : "programmeActivity", "verb" : "deliversFor", "object" : "result", "since" : null, "inverse" : "isAchievedTrough" }); r.register({ "id" : "programmeActivity/isPartOf/reportingFlow", "idref" : "isPartOf", "subject" : "programmeActivity", "verb" : "isPartOf", "object" : "reportingFlow", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "programmeActivity/isSubComponentOf/programmeActivity", "idref" : "isSubComponentOf", "subject" : "programmeActivity", "verb" : "isSubComponentOf", "object" : "programmeActivity", "inverse" : "has" }); r.register({ "id" : "programmeActivity/isBoundTo/dataset", "idref" : "isBoundTo", "subject" : "programmeActivity", "verb" : "isBoundTo", "object" : "dataset", "inverse" : "isBoundTo" }); r.register({ "id" : "projectSite/isVisitedBy/monitoringVisit", "idref" : "isVisitedBy", "subject" : "projectSite", "verb" : "isVisitedBy", "object" : "monitoringVisit", "on" : null, "inverse" : "visits" }); r.register({ "id" : "form/isPartOf/reportingFlow", "idref" : "isPartOf", "subject" : "form", "verb" : "isPartOf", "object" : "reportingFlow", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "section/belongsTo/form", "idref" : "belongsTo", "subject" : "section", "verb" : "belongsTo", "object" : "form", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "container/belongsTo/section", "idref" : "belongsTo", "subject" : "container", "verb" : "belongsTo", "object" : "section", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "container/belongsTo/container", "idref" : "belongsTo", "subject" : "container", "verb" : "belongsTo", "object" : "container", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "field/definesSkipPatternFor/section", "idref" : "definesSkipPatternFor", "subject" : "field", "verb" : "definesSkipPatternFor", "object" : "section", "inverse" : "dependsOn" }); r.register({ "id" : "field/belongsTo/section", "idref" : "belongsTo", "subject" : "field", "verb" : "belongsTo", "object" : "section", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "field/definesSkipPatternFor/container", "idref" : "definesSkipPatternFor", "subject" : "field", "verb" : "definesSkipPatternFor", "object" : "container", "inverse" : "dependsOn" }); r.register({ "id" : "field/belongsTo/container", "idref" : "belongsTo", "subject" : "field", "verb" : "belongsTo", "object" : "container", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "field/definesSkipPatternFor/field", "idref" : "definesSkipPatternFor", "subject" : "field", "verb" : "definesSkipPatternFor", "object" : "field", "inverse" : "dependsOn" }); r.register({ "id" : "office/belongsTo/office", "idref" : "belongsTo", "subject" : "office", "verb" : "belongsTo", "object" : "office", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "position/isPartOf/office", "idref" : "isPartOf", "subject" : "position", "verb" : "isPartOf", "object" : "office", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "position/supervises/position", "idref" : "supervises", "subject" : "position", "verb" : "supervises", "object" : "position", "inverse" : "isSupervisedBy" }); r.register({ "id" : "person/participatesIn/monitoringVisit", "idref" : "participatesIn", "subject" : "person", "verb" : "participatesIn", "object" : "monitoringVisit", "inclusive" : "true", "on" : null, "inverse" : "attendedBy" }); r.register({ "id" : "person/worksIn/office", "idref" : "worksIn", "subject" : "person", "verb" : "worksIn", "object" : "office", "since" : null, "until" : null, "inverse" : "has" }); r.register({ "id" : "dataset/belongsTo/dataView", "idref" : "belongsTo", "subject" : "dataset", "verb" : "belongsTo", "object" : "dataView", "inclusive" : "true", "inverse" : "has" }); r.register({ "id" : "datasetValues/for/dataset", "idref" : "for", "subject" : "datasetValues", "verb" : "for", "object" : "dataset", "inverse" : "has" }); r.register({ "id" : "dataView/for/resultMatrix", "idref" : "for", "subject" : "dataView", "verb" : "for", "object" : "resultMatrix", "inverse" : "has" }); r.register({ "id" : "viewLayout/for/dataView", "idref" : "for", "subject" : "viewLayout", "verb" : "for", "object" : "dataView", "inverse" : "has" }); r.register({ "id" : "crossfilter/for/dataset", "idref" : "for", "subject" : "crossfilter", "verb" : "for", "object" : "dataset", "inverse" : "has" }); r.register({ "id" : "dimGroup/for/dimension", "idref" : "for", "subject" : "dimGroup", "verb" : "for", "object" : "dimension", "inverse" : "has" }); r.register({ "id" : "ct/for/viewLayout", "idref" : "for", "subject" : "ct", "verb" : "for", "object" : "viewLayout", "inverse" : "has" });})();Ext.apply(Ext.form.field.VTypes, {
    phoneNo : function(v, field) {
     	return  /^(\(?\+?[0-9]*\)?)?[0-9_\- \(\)]*$/.test(v)
    },
    phoneNoMask : /[\d-+() ]/,
    phoneNoText : 'this is not a valid phone number'
});
//====================
//   DomHelper
//====================
// @lastpudate: 2012-11-13T15:12:48.462+01:00
// file: /db/es.master/extClass/classes/ux/util/Types.js
/*::::*/
Ext.apply(Ext.DomHelper, {
    getSelection: function () {
        if (window.getSelection) {
            return window.getSelection();
        }
        if (document.getSelection) {
            return document.getSelection();
            }
        return document.selection.createRange();
    }
});

Ext.apply(Ext.ComponentQuery.pseudos, {
    isLayoutType :function(components, selector) {
        var result = [],
            c, i, len;
    
        for (i = 0, len = components.length; i < len; i++) {
            c = components[i];
    
            if (c.layout && c.layout.type == selector) {
                result.push(c);
            }
        }
    
        return result;
    }
});


/*::::*/
                };
                })(this)
            